// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  HeroesAndEvents
  Activity
  HistoricalSites
  DigitalArt

  @@map("category")
}

model Users {
  id String @id

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  avatarUrl String? @map("avatar_url")

  telegramId       BigInt  @unique @map("telegram_id")
  firstName        String  @map("first_name")
  lastName         String? @map("last_name")
  telegramUsername String? @map("telegram_username")
  wallet           String?
  balance          Int     @default(0)

  assets    Asset[]   @relation("user_assets")
  assetsOwn Asset[]   @relation("user_assets_own")
  comments  Comment[]

  invites   Invite[] @relation("invites")
  invitedBy Invite?  @relation("invited_by")

  @@index([telegramId])
  @@map("users")
}

model Invite {
  sender   Users  @relation("invites", fields: [senderId], references: [id])
  senderId String @map("sender_id")

  receiver   Users  @relation("invited_by", fields: [receiverId], references: [id])
  receiverId String @unique @map("receiver_id")

  createdAt DateTime @default(now())

  @@id([senderId, receiverId])
  @@unique([senderId, receiverId])
  @@map("invites")
}

model File {
  id            String @id
  type          String
  original_name String
  region        String
  bucket        String
  url           String

  @@map("files")
}

model Asset {
  id String @id

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  image       String
  description String
  title       String


  creator Users @relation("user_assets", fields: [creatorId], references: [telegramId])
  creatorId BigInt @map("creator_id")


  consumer   Users?  @relation("user_assets_own", fields: [consumerId], references: [telegramId])
  consumerId BigInt? @map("consumer_id")

  category Category

  comments Comment[]

  @@map("asset")
}

model Comment {
  id String @id

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  content String

  creator   Users  @relation(fields: [creatorId], references: [telegramId])
  creatorId BigInt @map("creator_id")

  asset   Asset  @relation(fields: [assetId], references: [id])
  assetId String @map("asset_id")

  @@map("comment")
}
