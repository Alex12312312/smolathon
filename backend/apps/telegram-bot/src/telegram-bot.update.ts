import { Update, Start, Ctx } from 'nestjs-telegraf'
import { BotContext } from './telegram-bot.types'
import { PrismaService } from '@app/db'
import { ConfigService } from '@nestjs/config'

@Update()
export class TelegramBotUpdate {
  constructor(
    private readonly prisma: PrismaService,
    private readonly config: ConfigService,
  ) {}

  private async replyWelcome(ctx: BotContext) {
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¶–∏—Ñ—Ä–æ–≤–æ–π –≥–æ—Ä–æ–¥!
      
–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ—è–≤–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ –∏  –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ê —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–º –≥–æ—Ä–æ–¥–µ –°–º–æ–ª–µ–Ω—Å–∫–µ! ü§ì
      `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                web_app: { url: this.config.getOrThrow<string>('WEB_APP_URL') },
                text: '–û—Ç–∫—Ä—ã—Ç—å üöÄ',
              },
            ],
          ],
        },
      },
    )
  }

  @Start()
  async start(@Ctx() ctx: BotContext) {
    const payload: string | undefined =
      // @ts-expect-error because idk
      ctx.payload && typeof ctx.payload === 'string' && ctx.payload.length > 0 && ctx.payload !== ''
        ? // @ts-expect-error because idk
          ctx.payload
        : undefined

    if (payload) {
      const inviterId = payload

      const inviter = await this.prisma.users.findFirst({ where: { id: inviterId } })

      if (!inviter) {
        await this.replyWelcome(ctx)
        return
      }

      const invite = await this.prisma.invite.findFirst({ where: { receiverId: ctx.userModel.id } })

      if (!!invite) {
        await this.replyWelcome(ctx)
        return
      }

      await this.prisma.invite.create({
        data: {
          senderId: inviterId,
          receiverId: ctx.userModel.id,
        },
      })
    }

    await this.replyWelcome(ctx)
  }
}
